name: Kubernetes pods CD dev
on:
  push:
    branches:
      - "feature/**"
    paths:
      - terraform/kubernetes/**

permissions:
      contents: read
      id-token: write
      packages: write

env:
  ENVIRONMENT: 'dev'
  ARM_CLIENT_ID: ${{ secrets.MAXVRBTSK_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.MAXVRBTSK_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.MAXVRBTSK_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.MAXVRBTSK_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.MAXVRBTSK_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.MAXVRBTSK_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.MAXVRBTSK_TENANT_ID }}

jobs:
  creating_tag:
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    outputs:
      k8s_ns_extended_number: ${{ steps.namespace_tag.outputs.tag }}
      existing_tf_workspace_dev: ${{ steps.existing_tf_workspace_dev.outputs.workspace_dev }}
      existing_tf_workspace_prod: ${{ steps.existing_tf_workspace_prod.outputs.workspace_prod }}
      gh_owner_lc: ${{ steps.set_owner_lowercase.outputs.owner_lowercase }}

    steps:
      - id: namespace_tag
        run: echo "tag=$(date +"%d%H%M")" >> $GITHUB_OUTPUT

      - id: existing_tf_workspace_dev
        run: echo "workspace_dev=$(terraform workspace list | grep dev)" >> $GITHUB_OUTPUT

      - id: existing_tf_workspace_prod
        run: echo "workspace_prod=$(terraform workspace list | grep prod)" >> $GITHUB_OUTPUT

      - id: set_owner_lowercase
        run: echo "owner_lowercase=$(echo ${{ github.repository_owner }} | awk '{print tolower($0)}')" >> $GITHUB_OUTPUT

  environment_deploy:
    runs-on: ubuntu-latest
    #runs-on: self-hosted
    needs: [creating_tag]
    
    steps:
    - name: pre checkout
      uses: actions/checkout@v3

    - name: 'az cli login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.MAXVRBTSK_CLIENT_ID }}
        tenant-id: ${{ secrets.MAXVRBTSK_TENANT_ID }}
        subscription-id: ${{ secrets.MAXVRBTSK_SUBSCRIPTION_ID }}
        
    - name: 'azure cli script'
      uses: azure/CLI@v1
      with:
        azclientversion: latest
        inlineScript: |
          az account show
          az group list

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: 'ghcr.io'
        username: 'isostheneia94'
        password: ${{ secrets.GH_TOKEN }}
      
    - name: Build kubernetes deployment / init
      working-directory: ./terraform/kubernetes
      run: terraform init

    - name: Build kubernetes deployment / plan (if workspace exists)
      if: needs.creating_tag.outputs.existing_tf_workspace_dev == 'dev'
      working-directory: ./terraform/kubernetes
      env:
        TF_VAR_environment: $ENVIRONMENT
        TF_VAR_gh-host: ${{ needs.creating_tag.outputs.gh_owner_lc }}
        AKS_NAME: "aks-WPDBJS-${ENVIRONMENT}"
        RG_NAME: "RG-WPDBJS-${ENVIRONMENT}"
        DB_USER: ${{ secrets.WORDPRESS_DB_USER_DEV }}
        DB_PASSWORD: ${{ secrets.WORDPRESS_DB_PASSWORD_DEV }}
        DB_NAME: ${{ secrets.WORDPRESS_DB_NAME_DEV }}
        GITHUB_CONNECT_TOKEN: ${{ secrets.GH_TOKEN }}
        DOCKER_CONFIG_GHCR_AUTH: ${{ secrets.DOCKER_CONFIG_GHCR_AUTH }}
        NAMESPACE_EXTENDED_NUMBER: ${{ needs.creating_tag.outputs.k8s_ns_extended_number }}
      run: |
        terraform workspace select ${ENVIRONMENT}
        terraform plan --var-file="terraform.tfvars" -var "aks-name=${AKS_NAME}" -var "rg-name=${RG_NAME}" -var "mysql-user=${DB_USER}" -var "mysql-password=${DB_PASSWORD}" -var "mysql-name=${DB_NAME}" -var "gh-access-token=${GITHUB_CONNECT_TOKEN}" -var "docker-config-ghcr-auth=${DOCKER_CONFIG_GHCR_AUTH}" -var "ns-extended-number=${NAMESPACE_EXTENDED_NUMBER}" -out=plan-${ENVIRONMENT} -lock=false

    - name: Build kubernetes deployment / plan (if workspace doesnt exist)
      if: needs.creating_tag.outputs.existing_tf_workspace_dev != 'dev'
      working-directory: ./terraform/kubernetes
      env:
        TF_VAR_environment: $ENVIRONMENT
        TF_VAR_gh-host: ${{ needs.creating_tag.outputs.gh_owner_lc }}
        AKS_NAME: "aks-WPDBJS-${ENVIRONMENT}"
        RG_NAME: "RG-WPDBJS-${ENVIRONMENT}"
        DB_USER: ${{ secrets.WORDPRESS_DB_USER_DEV }}
        DB_PASSWORD: ${{ secrets.WORDPRESS_DB_PASSWORD_DEV }}
        DB_NAME: ${{ secrets.WORDPRESS_DB_NAME_DEV }}
        GITHUB_CONNECT_TOKEN: ${{ secrets.GH_TOKEN }}
        DOCKER_CONFIG_GHCR_AUTH: ${{ secrets.DOCKER_CONFIG_GHCR_AUTH }}
        NAMESPACE_EXTENDED_NUMBER: ${{ needs.creating_tag.outputs.k8s_ns_extended_number }}
      run: |
        terraform workspace new ${ENVIRONMENT}
        terraform plan --var-file="terraform.tfvars" -var "aks-name=${AKS_NAME}" -var "rg-name=${RG_NAME}" -var "mysql-user=${DB_USER}" -var "mysql-password=${DB_PASSWORD}" -var "mysql-name=${DB_NAME}" -var "gh-access-token=${GITHUB_CONNECT_TOKEN}" -var "docker-config-ghcr-auth=${DOCKER_CONFIG_GHCR_AUTH}" -var "ns-extended-number=${NAMESPACE_EXTENDED_NUMBER}" -out=plan-${ENVIRONMENT} -lock=false


    - name: Build kubernetes deployment / apply
      working-directory: ./terraform/kubernetes
      env:
        TF_VAR_environment: $ENVIRONMENT
        TF_VAR_gh-host: ${{ needs.createing_tag.outputs.gh_owner_lc }}
        AKS_NAME: "aks-WPDBJS-${ENVIRONMENT}"
        RG_NAME: "RG-WPDBJS-${ENVIRONMENT}"
        DB_USER: ${{ secrets.WORDPRESS_DB_USER_DEV }}
        DB_PASSWORD: ${{ secrets.WORDPRESS_DB_PASSWORD_DEV }}
        DB_NAME: ${{ secrets.WORDPRESS_DB_NAME_DEV }}
        GITHUB_CONNECT_TOKEN: ${{ secrets.GH_TOKEN }}
        DOCKER_CONFIG_GHCR_AUTH: ${{ secrets.DOCKER_CONFIG_GHCR_AUTH }}
        NAMESPACE_EXTENDED_NUMBER: ${{ needs.creating_tag.outputs.k8s_ns_extended_number }}
      run: |
        terraform workspace select ${ENVIRONMENT}
        terraform apply -auto-approve "plan-${ENVIRONMENT}"

  CD_prod_trigger:
    runs-on: ubuntu-latest
    #runs-on: self-hosted
    needs: [creating_tag, environment_deploy]
    steps:
    - name: pre checkout
      uses: actions/checkout@v3

    - name: run CD
      env:
        K8S_NS_EXTENDED_NUMBER: ${{ needs.creating_tag.outputs.k8s_ns_extended_number }}
        WORKSPACE_PROD: ${{ needs.creating_tag.outputs.existing_tf_workspace_dev }}
        GH_OWNER_LOWERCASE: ${{ needs.creating_tag.outputs.gh_owner_lc }}
      run: gh workflow run cd-prod.yml -f ns-extended-number=${K8S_NS_EXTENDED_NUMBER} -f existing_tf_workspace_prod=${WORKSPACE_PROD} -f gh-host=${GH_OWNER_LOWERCASE}
